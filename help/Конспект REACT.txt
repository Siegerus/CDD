1. React содаёт виртуальный DOM.Все изменения приложения,проиходят сначала в виртуальном DOM. При изменении React сначала сравнивает состояние 
текущего виртуального DOM(изменённого) с тем что был. И уже потом точечно переносит нужные измениния в реальный DOM. Т.к виртуальный DOM это объект js, 
изменения в нём происходят моментально. Как следствие и обновления реального DOM после действий пользователя происходит очень быстро.

2. Может быть только один корневой элемент.
3. Кастомные пользовательские элементы с заглавной буквы(как классы), встроенные - с маленькой.
4. Св-ва можно передавать только дочерним компонентам от родительского компонента.
5. У каждого компонента должен быть родительский компонент. Компоненты можно переиспользовать.
6. Св-ва компонентов передаются от родительского к дочерненму компоненту.
7. Компонент не должен изменять свои св-ва. Но компонент может изменять собственное состояние.
8. Компонент не может изменять состояние других компонентов(включая дочерние). Состояние может меняться только в компоненте,
   который является собсвенником этого состояния.
9. Но при этом любой компонент, который ниже по иерархии, может отправить запрос на изменение состояния вышестоящего компонента.
10. Не следует изменять св-ва, которые передаются компоненту от его родителя. Если нужно изменить какие то данные внутри компонента,
   надо использовать состояние компонента.
11. Каждый раз, когда изменяются какие то св-ва либо состояния к-та, реакт выполняет ререндеринг к-та.
12. Части св-в и состояния можно передавать другим дочерним компонентам в виде св-в. 

13. Спомощью хуков можно управлять состоянием в функциональных компонентах.
14. За работу с реальным DOM в браузерах отвечает библиотека "ReactDOM". Для моб.приложений - "ReactNative".
15. Рекомендуется сначала импортировать внешние npm пакеты, а затем уже внутренние файлы, ф-ции.
16. Для именования пользовательских компонентов всегда используется PascalCase.
17. Если значение переменной известно до запуска приложения, то задаётся константа вида THIS_IS_CONST.
18. Компоненты зачастую создаются в отдельных файлах. Имена файлов тоже задают в PascalCase. Название файла как правило совпадает с названием к-та.
19. РАзмещаь более одного компонента в одном файле не рекомендуется.
20. При использовании css модулей рекомендуется писать название классов в camelCase нотации, т.к. названия классов являются св-вами js объекта.